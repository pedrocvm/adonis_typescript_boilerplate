import {{pascalCase name}} from "App/Models/{{pascalCase name}}";
import { HttpContextContract } from "@ioc:Adonis/Core/HttpContext";
import InternalServerErrorException from "App/Exceptions/InternalServerErrorException";

export default class {{pascalCase name}}Controller {
  public async index() {
    const items = await {{pascalCase name}}.all();

    return items;
  }

  public async show({ params }: HttpContextContract) {
    const id = params.id;
    const item = await {{pascalCase name}}.find(id);

    if (!item) {
      throw new InternalServerErrorException("Item not found");
    }

    return item;
  }

  public async store({ request }: HttpContextContract) {
    const data = request.only([]);

    const newItem = await {{pascalCase name}}.create(data);

    return newItem;
  }

  public async edit({ request, params }: HttpContextContract) {
    const id = params.id;
    const data = request.only([]);

    const item = await {{pascalCase name}}.find(id);

    if (!item) {
      throw new InternalServerErrorException("Item not found");
    }

    return await {{pascalCase name}}.updateOrCreate({ id }, data);
  }

  public async destroy({ params }: HttpContextContract) {
    const id = params.id;

    const item = await {{pascalCase name}}.find(id);

    if (!item) {
      throw new InternalServerErrorException("Item not found");
    }

    return await item.delete();
  }
}
